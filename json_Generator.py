import json
import os
from itertools import combinations_with_replacement, product

def sliding_windows_with_indices(seq, length, stride):
    windows = []
    for i in range(0, len(seq) - length + 1, stride):
        windows.append((seq[i:i+length], i+1, i+length))
    if windows and windows[-1][2] < len(seq):
        i = len(seq) - length if len(seq) >= length else 0
        windows.append((seq[i:], i+1, len(seq)))
    elif not windows:
        windows.append((seq, 1, len(seq)))
    return windows

# Input: (name, sequence, window_size, stride)
sequence_inputs = [
    (
        "protein_A",        "MPARRLLLLLTLLLPGLGIFGSTSTVTLPETLLFVSTLDGSLHAVSKRTGSIKWTLKEDPVLQVPTHVEEPAFLPDPNDGSLYTLGSKNNEGLTKLPFTIPELVQASPCRSSDGILYMGKKQDIWYVIDLLTGEKQQTLSSAFADSLCPSTSLLYLGRTEYTITMYDTKTRELRWNATYFDYAASLPEDDVDYKMSHFVSNGDGLVVTVDSESGDVLWIQNYASPVVAFYVWQREGLRKVMHINVAVETLRYLTFMSGEVGRITKWKYPFPKETEAKSKLTPTLYVGKYSTSLYASPSMVHEGVAVVPRGSTLPLLEGPQTDGVTIGDKGECVITPSTDVKFDPGLKSKNKLNYLRNYWLLIGHHETPLSASTKMLERFPNNLPKHRENVIPADSEKKSFEEVINLVDQTSENAPTTVSRDVEEKPAHAPARPEAPVDSMLKDMATIILSTFLLIGWVAFIITYPLSMHQQQQLQHQQFQKELEKIQLLQQQQQQLPFHPPGDTAQDGELLDTSGPYSESSGTSSPSTSPRASNHSLCSGSSASKAGSSPSLEQDDGDEETSVVIVGKISFCPKDVLGHGAEGTIVYRGMFDNRDVAVKRILPECFSFADREVQLLRESDEHPNVIRYFCTEKDRQFQYIAIELCAATLQEYVEQKDFAHLGLEPITLLQQTTSGLAHLHSLNIVHRDLKPHNILISMPNAHGKIKAMISDFGLCKKLAVGRHSFSRRSGVPGTEGWIAPEMLSEDCKENPTYTVDIFSAGCVFYYVISEGSHPFGKSLQRQANILLGACSLDCLHPEKHEDVIARELIEKMIAMDPQKRPSAKHVLKHPFFWSLEKQLQFFQDVSDRIEKESLDGPIVKQLERGGRAVVKMDWRENITVPLQTDLRKFRTYKGGSVRDLLRAMRNKKHHYRELPAEVRETLGSLPDDFVCYFTSRFPHLLAHTYRAMELCSHERLFQPYYFHEPPEPQPPVTPDAL",
        977,
        977
    ),
    (
        "protein_B",        "MEPPSPQDEGLRKKQPKKPVPEILPRPPRALFCLTLQNPLRKACISIVEWKPFETIILLTIFANCVALAVYLPMPEDDNNTLNLGLEKLEYFFLIVFSIEAAMKIIAYGFLFHQDAYLRSGWNVLDFIIVFLGVFTVILEQVNIIQTNTAPMSSKGAGLDVKALRAFRVLRPLRLVSGVPSLQVVLNSIFKAMLPLFHIALLVLFMVIIYAIIGLELFKGKMHKTCYFIGTDIVATVENEKPSPCARTGSGRPCTINGSECRGGWPGPNHGITHFDNFGFSMLTVYQCISMEGWTDVLYWVNDAIGNEWPWIYFVTLILLGSFFILNLVLGVLSGEFTKEREKAKSRGTFQKLREKQQLEEDLRGYMSWITQGEVMDVDDLREGKLSLDEGGSDTESLYEIEGLNKIIQFIRHWRQWNRVFRWKCHDLVKSKVFYWLVILIVALNTLSIASEHHNQPLWLTHLQDVANRVLLTLFTIEMLMKMYGLGLRQYFMSIFNRFDCFVVCSGILEILLVESGAMSPLGISVLRCIRLLRLFKITKYWTSLSNLVASLLNSIRSIASLLLLLFLFIIIFALLGMQLFGGRYDFEDTEVRRSNFDNFPQALISVFQVLTGEDWNSVMYNGIMAYGGPTYPGVLVCIYFIILFVCGNYILLNVFLAIAVDNLAEAESLTSAQKAKAEERKRRKMSKGLPDKSEEERATVTKKLEQKSKGEGIPTTAKLKIDEFESNVNEVKDPYPSADFPGDDEEDEPEIPVSPRPRPLAELQLKEKAVPIPEASSFFIFSPTNKIRVLCHRIVNATWFTNFILLFILLSSAALAAEDPIRADSMRNQILEYFDYVFTAVFTVEIVLKMTTYGAFLHKGSFCRNYFNILDLLVVAVSLISMGLESSAISVVKILRVLRVLRPLRAINRAKGLKHVVQCVFVAIRTIGNIVLVTTLLQFMFACIGVQLFKGKFYSCNDLSKMTEEECRGYYYIYKDGDPTQIELRPRQWIHNDFHFDNVLSAMMSLFTVSTFEGWPQLLYKAIDSNEEDTGPVYNNRVEMAIFFIIYIILIAFFMMNIFVGFVIVTFQEQGETEYKNCELDKNQRQCVQYALKARPLRCYIPKNPYQYQVWYVVTSSYFEYLMFALIMLNTICLGMQHYNQSEQMNHISDILNVAFTIIFTLEMVLKLIAFKPRGYFGDPWNVFDFLIVIGSIIDVILSEIDTFLASSGGLYCLGGGCGNVDPDESARISSAFFRLFRVMRLVKLLNRAEGVRTLLWTFIKSFQALPYVALLIVMLFFIYAVIGMQMFGKIAMVDGTQINRNNNFQTFPQAVLLLFRCATGEAWQEILLACSYGKLCDPESDYAPGEEHTCGTNFAYYYFISFYMLCAFLIINLFVAVIMDNFDYLTRDWSILGPHHLDEFKAIWAEYDPEAKGRIKHLDVVTLLRRIQPPLGFGKFCPHRVACKRLVGMNMPLNSDGTVTFNATLFALVRTALKIKTEGNFEQANEELRAIIKKIWKRTSMKLLDQVIPPIGDDEVTVGKFYATFLIQEHFRKFMKRQEEYYGYRPKKDTVQIQAGLRTIEEEAAPEIHRAISGDLTAEEELERAMVEAAMEEGIFRRTGGLFGQVDNFLERTNSLPPVMANQRPLQFAEIEMEELESPVFLEDFPQNPGTHPLARANTNNANANVAYGNSSHRNNPVFSSICYEREFLGEADMPVTREGPLSQPCRASGPHSRSHVDKLKRPMTQRGMPEGQVPPSPCQVTGAKAEHPVQKEGKGPTSRFLETPNSRNFEEHVPRNSAHRCTAPATAMLIQEALVRGGLDSLAADANFVMATGQALADACQMEPEEVEVAATELLKQESPEGGAVPWEP",
        15,
        5
    )
]

# Compute Canada output path
output_folder = "/lustre07/scratch/User/alphafold/input/"
os.makedirs(output_folder, exist_ok=True)

for (name1, seq1, win1_size, stride1), (name2, seq2, win2_size, stride2) in combinations_with_replacement(sequence_inputs, 2):
    if name1 == name2:
        continue

    windows1 = sliding_windows_with_indices(seq1, win1_size, stride1)
    windows2 = sliding_windows_with_indices(seq2, win2_size, stride2)

    for ((win1, start1, end1), (win2, start2, end2)) in product(windows1, windows2):
        json_name = f"{name1}_{start1}-{end1}__{name2}_{start2}-{end2}"
        af3_input = {
            "name": json_name,
            "modelSeeds": [42],
            "sequences": [
                {"protein": {"id": "A", "sequence": win1}},
                {"protein": {"id": "B", "sequence": win2}},
            ],
            "dialect": "alphafold3",
            "version": 1
        }

        file_path = os.path.join(output_folder, f"{json_name}.json")
        with open(file_path, "w") as f:
            json.dump(af3_input, f, indent=2)
        print(f"Wrote file: {file_path}")
